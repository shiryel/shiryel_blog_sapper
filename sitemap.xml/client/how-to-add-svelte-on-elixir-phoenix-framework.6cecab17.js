import{S as n,i as s,s as a,e as t,a as e,t as o,q as p,c,f as l,g as u,b as i,d as r,h as k,k as h,j as d,n as m}from"./client.1565d37b.js";function f(n){let s,a,f,v,g,E,w,b,y,_,x,P,T,j,M,O,N,H,A,L,F,C,R,S,Y,$,q,D,I,J,U,B,W,z,G,K,Q,V,X,Z,nn,sn,an,tn,en,on,pn,cn,ln,un,rn,kn,hn,dn,mn,fn,vn,gn,En,wn,bn,yn,_n,xn,Pn,Tn,jn,Mn,On,Nn,Hn,An,Ln,Fn,Cn,Rn,Sn,Yn,$n,qn,Dn,In;return{c(){s=t("meta"),a=t("meta"),f=e(),v=t("h1"),g=o("How to add svelte on Elixir Phoenix Framework"),E=e(),w=t("h2"),b=o("Adding the Svelte and Svelte-Loader"),y=e(),_=t("p"),x=o("To do that, run this on the root dir of your phoenix project:"),P=e(),T=t("pre"),j=e(),M=t("h2"),O=o("Configuring the webpack"),N=e(),H=t("p"),A=o("Based on: "),L=t("a"),F=o("https://github.com/sveltejs/template-webpack"),C=e(),R=t("p"),S=o("First add this on asserts/webpack.config.js:"),Y=e(),$=t("pre"),q=e(),D=t("p"),I=o("Then add:"),J=e(),U=t("pre"),B=e(),W=t("p"),z=o("For the config explanations see: "),G=t("a"),K=o("https://github.com/sveltejs/svelte-loader"),Q=e(),V=t("h2"),X=o("Adding the function on Phoenix"),Z=e(),nn=t("p"),sn=o("On your APP_web.ex in the function "),an=t("code"),tn=o("view_helpers"),en=o(" add the function:"),on=e(),pn=t("pre"),cn=e(),ln=t("p"),un=t("code"),rn=o("Note: You can define this function in another file and import if you want a more clean solution"),kn=e(),hn=t("h2"),dn=o("Mounting the svelte component"),mn=e(),fn=t("p"),vn=o("Finally we need to get the svelte file and mount on the element defined by the function above, for this we create a file "),gn=t("code"),En=o("svelte.js"),wn=o(" on assets/js/"),bn=e(),yn=t("pre"),_n=e(),xn=t("h2"),Pn=o("Testing"),Tn=e(),jn=t("p"),Mn=o("Just create a component and add a"),On=e(),Nn=t("pre"),Hn=e(),An=t("p"),Ln=o("on a template :)"),Fn=e(),Cn=t("p"),Rn=o("Note 1: Yes, the YOUR_COMPONENT_FILE_NAME is the name of your file, please change it ;)"),Sn=e(),Yn=t("p"),$n=o("Note 2: The props will be used on your "),qn=t("code"),Dn=o("export"),In=o(" variables on the svelte component"),this.h()},l(n){const t=p('[data-svelte="svelte-195agrv"]',document.head);s=c(t,"META",{name:!0,content:!0}),a=c(t,"META",{name:!0,content:!0}),t.forEach(l),f=u(n),v=c(n,"H1",{});var e=i(v);g=r(e,"How to add svelte on Elixir Phoenix Framework"),e.forEach(l),E=u(n),w=c(n,"H2",{});var o=i(w);b=r(o,"Adding the Svelte and Svelte-Loader"),o.forEach(l),y=u(n),_=c(n,"P",{});var k=i(_);x=r(k,"To do that, run this on the root dir of your phoenix project:"),k.forEach(l),P=u(n),T=c(n,"PRE",{class:!0}),i(T).forEach(l),j=u(n),M=c(n,"H2",{});var h=i(M);O=r(h,"Configuring the webpack"),h.forEach(l),N=u(n),H=c(n,"P",{});var d=i(H);A=r(d,"Based on: "),L=c(d,"A",{href:!0,rel:!0});var m=i(L);F=r(m,"https://github.com/sveltejs/template-webpack"),m.forEach(l),d.forEach(l),C=u(n),R=c(n,"P",{});var Jn=i(R);S=r(Jn,"First add this on asserts/webpack.config.js:"),Jn.forEach(l),Y=u(n),$=c(n,"PRE",{class:!0}),i($).forEach(l),q=u(n),D=c(n,"P",{});var Un=i(D);I=r(Un,"Then add:"),Un.forEach(l),J=u(n),U=c(n,"PRE",{class:!0}),i(U).forEach(l),B=u(n),W=c(n,"P",{});var Bn=i(W);z=r(Bn,"For the config explanations see: "),G=c(Bn,"A",{href:!0,rel:!0});var Wn=i(G);K=r(Wn,"https://github.com/sveltejs/svelte-loader"),Wn.forEach(l),Bn.forEach(l),Q=u(n),V=c(n,"H2",{});var zn=i(V);X=r(zn,"Adding the function on Phoenix"),zn.forEach(l),Z=u(n),nn=c(n,"P",{});var Gn=i(nn);sn=r(Gn,"On your APP_web.ex in the function "),an=c(Gn,"CODE",{});var Kn=i(an);tn=r(Kn,"view_helpers"),Kn.forEach(l),en=r(Gn," add the function:"),Gn.forEach(l),on=u(n),pn=c(n,"PRE",{class:!0}),i(pn).forEach(l),cn=u(n),ln=c(n,"P",{});var Qn=i(ln);un=c(Qn,"CODE",{});var Vn=i(un);rn=r(Vn,"Note: You can define this function in another file and import if you want a more clean solution"),Vn.forEach(l),Qn.forEach(l),kn=u(n),hn=c(n,"H2",{});var Xn=i(hn);dn=r(Xn,"Mounting the svelte component"),Xn.forEach(l),mn=u(n),fn=c(n,"P",{});var Zn=i(fn);vn=r(Zn,"Finally we need to get the svelte file and mount on the element defined by the function above, for this we create a file "),gn=c(Zn,"CODE",{});var ns=i(gn);En=r(ns,"svelte.js"),ns.forEach(l),wn=r(Zn," on assets/js/"),Zn.forEach(l),bn=u(n),yn=c(n,"PRE",{class:!0}),i(yn).forEach(l),_n=u(n),xn=c(n,"H2",{});var ss=i(xn);Pn=r(ss,"Testing"),ss.forEach(l),Tn=u(n),jn=c(n,"P",{});var as=i(jn);Mn=r(as,"Just create a component and add a"),as.forEach(l),On=u(n),Nn=c(n,"PRE",{class:!0}),i(Nn).forEach(l),Hn=u(n),An=c(n,"P",{});var ts=i(An);Ln=r(ts,"on a template :)"),ts.forEach(l),Fn=u(n),Cn=c(n,"P",{});var es=i(Cn);Rn=r(es,"Note 1: Yes, the YOUR_COMPONENT_FILE_NAME is the name of your file, please change it ;)"),es.forEach(l),Sn=u(n),Yn=c(n,"P",{});var os=i(Yn);$n=r(os,"Note 2: The props will be used on your "),qn=c(os,"CODE",{});var ps=i(qn);Dn=r(ps,"export"),ps.forEach(l),In=r(os," variables on the svelte component"),os.forEach(l),this.h()},h(){document.title="How to add svelte on Elixir Phoenix Framework",k(s,"name","description"),k(s,"content","A blog post as a reminder on how to work with svelte on Elixir"),k(a,"name","keywords"),k(a,"content","elixir, svelte"),k(T,"class","language-bash"),k(L,"href","https://github.com/sveltejs/template-webpack"),k(L,"rel","nofollow"),k($,"class","language-js"),k(U,"class","language-javascript"),k(G,"href","https://github.com/sveltejs/svelte-loader"),k(G,"rel","nofollow"),k(pn,"class","language-elixir"),k(yn,"class","language-javascript"),k(Nn,"class","language-elixir")},m(n,t){h(document.head,s),h(document.head,a),d(n,f,t),d(n,v,t),h(v,g),d(n,E,t),d(n,w,t),h(w,b),d(n,y,t),d(n,_,t),h(_,x),d(n,P,t),d(n,T,t),T.innerHTML='\n<code class="language-bash"><span class="token builtin class-name">cd</span> assets <span class="token operator">&amp;&amp;</span> <span class="token function">npm</span> <span class="token function">install</span> svelte svelte-loader --save</code>',d(n,j,t),d(n,M,t),h(M,O),d(n,N,t),d(n,H,t),h(H,A),h(H,L),h(L,F),d(n,C,t),d(n,R,t),h(R,S),d(n,Y,t),d(n,$,t),$.innerHTML='\n<code class="language-js">resolve<span class="token operator">:</span> <span class="token punctuation">&#123;</span>\n\talias<span class="token operator">:</span> <span class="token punctuation">&#123;</span>\n\t\tsvelte<span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">\'node_modules\'</span><span class="token punctuation">,</span> <span class="token string">\'svelte\'</span><span class="token punctuation">)</span>\n\t<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>\n\textensions<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'.mjs\'</span><span class="token punctuation">,</span> <span class="token string">\'.js\'</span><span class="token punctuation">,</span> <span class="token string">\'.svelte\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n\tmainFields<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'svelte\'</span><span class="token punctuation">,</span> <span class="token string">\'browser\'</span><span class="token punctuation">,</span> <span class="token string">\'module\'</span><span class="token punctuation">,</span> <span class="token string">\'main\'</span><span class="token punctuation">]</span>\n<span class="token punctuation">&#125;</span></code>',d(n,q,t),d(n,D,t),h(D,I),d(n,J,t),d(n,U,t),U.innerHTML='\n<code class="language-javascript"><span class="token punctuation">&#123;</span>\n\ttest<span class="token operator">:</span> <span class="token regex">/.svelte$/</span><span class="token punctuation">,</span>\n\tuse<span class="token operator">:</span> <span class="token punctuation">&#123;</span>\n\t\tloader<span class="token operator">:</span> <span class="token string">\'svelte-loader\'</span><span class="token punctuation">,</span>\n\t\toptions<span class="token operator">:</span> <span class="token punctuation">&#123;</span>\n\t\t\temitCss<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n\t\t\thotReload<span class="token operator">:</span> <span class="token boolean">true</span>\n\t\t<span class="token punctuation">&#125;</span>\n\t<span class="token punctuation">&#125;</span>\n<span class="token punctuation">&#125;</span></code>',d(n,B,t),d(n,W,t),h(W,z),h(W,G),h(G,K),d(n,Q,t),d(n,V,t),h(V,X),d(n,Z,t),d(n,nn,t),h(nn,sn),h(nn,an),h(an,tn),h(nn,en),d(n,on,t),d(n,pn,t),pn.innerHTML='\n<code class="language-elixir"><span class="token attribute variable">@doc</span> <span class="token string">"""\nWill add a component from the asserts/js/svelte, the component must have the same &#96;file_name&#96;\n"""</span>\n<span class="token attribute variable">@spec</span> svelte<span class="token punctuation">(</span>bitstring<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> map<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">::</span> Phoenix<span class="token punctuation">.</span>HTML<span class="token punctuation">.</span>safe<span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword">def</span> svelte<span class="token punctuation">(</span>file_name<span class="token punctuation">,</span> props <span class="token operator">\\</span> <span class="token punctuation">%</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token keyword">do</span>\n  <span class="token punctuation">&#123;</span><span class="token atom symbol">:ok</span><span class="token punctuation">,</span> props<span class="token punctuation">&#125;</span> <span class="token operator">=</span> Jason<span class="token punctuation">.</span>encode<span class="token punctuation">(</span>props<span class="token punctuation">)</span>\n\n  tag <span class="token operator">=</span>\n    Phoenix<span class="token punctuation">.</span>HTML<span class="token punctuation">.</span>Tag<span class="token punctuation">.</span>tag<span class="token punctuation">(</span><span class="token atom symbol">:div</span><span class="token punctuation">,</span>\n      <span class="token attr-name">data:</span> <span class="token punctuation">[</span><span class="token attr-name">props:</span> props<span class="token punctuation">]</span><span class="token punctuation">,</span>\n      <span class="token attr-name">class:</span> <span class="token string">"__svelte__-<span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span>file_name<span class="token delimiter punctuation">&#125;</span></span>"</span>\n    <span class="token punctuation">)</span>\n    <span class="token operator">|></span> Phoenix<span class="token punctuation">.</span>HTML<span class="token punctuation">.</span>safe_to_string<span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n  Phoenix<span class="token punctuation">.</span>HTML<span class="token punctuation">.</span>raw<span class="token punctuation">(</span>tag <span class="token operator">&lt;></span> <span class="token string">"&lt;/div>"</span><span class="token punctuation">)</span>\n<span class="token keyword">end</span></code>',d(n,cn,t),d(n,ln,t),h(ln,un),h(un,rn),d(n,kn,t),d(n,hn,t),h(hn,dn),d(n,mn,t),d(n,fn,t),h(fn,vn),h(fn,gn),h(gn,En),h(fn,wn),d(n,bn,t),d(n,yn,t),yn.innerHTML='\n<code class="language-javascript"><span class="token comment">// This code will look in the assets/js/svelte/ and in the sub-directorys for</span>\n<span class="token comment">// .svelte files, the result of this files will be mounted on the element</span>\n<span class="token comment">// "svelte-file_name" who have props from the phoenix render(name, props)</span>\n\n<span class="token comment">// directory, useSubdirectories, regex</span>\n<span class="token keyword">const</span> context <span class="token operator">=</span> require<span class="token punctuation">.</span><span class="token function">context</span><span class="token punctuation">(</span><span class="token string">"./svelte"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token regex">/.svelte$/</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nwindow<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n  context<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">file_path</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>\n    <span class="token comment">// name that will be requeride by render(name, props)</span>\n    <span class="token keyword">const</span> file_name <span class="token operator">=</span> file_path<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/./|.svelte$/g</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// COMPONENT</span>\n    <span class="token keyword">const</span> component_name <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token string">svelte-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>file_name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">&#96;</span></span><span class="token punctuation">;</span>\n    <span class="token keyword">const</span> component_container <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span>component_name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>component_container<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n      <span class="token keyword">return</span><span class="token punctuation">;</span>\n    <span class="token punctuation">&#125;</span>\n\n    <span class="token comment">// PROPS</span>\n    <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> props <span class="token punctuation">&#125;</span> <span class="token operator">=</span> component_container<span class="token punctuation">.</span>dataset<span class="token punctuation">;</span>\n    <span class="token keyword">let</span> my_props <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n      my_props <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">&#125;</span>\n\n    <span class="token comment">// MOUNT ON</span>\n    <span class="token keyword">const</span> App <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token string">./svelte/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>file_name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">&#96;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">new</span> <span class="token class-name">App<span class="token punctuation">.</span>default</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>\n      target<span class="token operator">:</span> component_container<span class="token punctuation">,</span>\n      props<span class="token operator">:</span> my_props\n    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code>',d(n,_n,t),d(n,xn,t),h(xn,Pn),d(n,Tn,t),d(n,jn,t),h(jn,Mn),d(n,On,t),d(n,Nn,t),Nn.innerHTML='\n<code class="language-elixir">&lt;<span class="token punctuation">%</span><span class="token operator">=</span> svelte <span class="token string">"YOUR_COMPONENT_FILE_NAME"</span><span class="token punctuation">,</span> <span class="token punctuation">%</span><span class="token punctuation">&#123;</span><span class="token attr-name">some_var:</span> <span class="token string">"some value"</span><span class="token punctuation">&#125;</span> <span class="token punctuation">%</span><span class="token operator">></span></code>',d(n,Hn,t),d(n,An,t),h(An,Ln),d(n,Fn,t),d(n,Cn,t),h(Cn,Rn),d(n,Sn,t),d(n,Yn,t),h(Yn,$n),h(Yn,qn),h(qn,Dn),h(Yn,In)},p:m,i:m,o:m,d(n){l(s),l(a),n&&l(f),n&&l(v),n&&l(E),n&&l(w),n&&l(y),n&&l(_),n&&l(P),n&&l(T),n&&l(j),n&&l(M),n&&l(N),n&&l(H),n&&l(C),n&&l(R),n&&l(Y),n&&l($),n&&l(q),n&&l(D),n&&l(J),n&&l(U),n&&l(B),n&&l(W),n&&l(Q),n&&l(V),n&&l(Z),n&&l(nn),n&&l(on),n&&l(pn),n&&l(cn),n&&l(ln),n&&l(kn),n&&l(hn),n&&l(mn),n&&l(fn),n&&l(bn),n&&l(yn),n&&l(_n),n&&l(xn),n&&l(Tn),n&&l(jn),n&&l(On),n&&l(Nn),n&&l(Hn),n&&l(An),n&&l(Fn),n&&l(Cn),n&&l(Sn),n&&l(Yn)}}}export default class extends n{constructor(n){super(),s(this,n,null,f,a,{})}}
