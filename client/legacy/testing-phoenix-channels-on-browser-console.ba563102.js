import{S as n,i as s,s as a,e as t,f as o,t as e,w as p,g as c,k as l,l as i,h as r,j as u,m as h,o as k,n as d,r as g}from"./client.837e364c.js";function m(n){let s,a,m,f,w,y,v,E,b,x,j,T,S,P,H,I,M,C,A,B,J,L,R,O,K,N,D,F,W,_,q,z,G,Q,U,V;return{c(){s=t("meta"),a=t("meta"),m=t("meta"),f=t("meta"),w=o(),y=t("h1"),v=e("Testing Phoenix Channels on Browser console"),E=o(),b=t("p"),x=e("So… I was building a backend using only the channels, and I wanted to test it on the console… so after many search, here is how you can make it:"),j=o(),T=t("h2"),S=e("1 - Connect to a socket"),P=o(),H=t("pre"),I=o(),M=t("h2"),C=e("2 - Show the messages that arrive from the server"),A=o(),B=t("pre"),J=o(),L=t("h2"),R=e("3 - Join to a topic"),O=o(),K=t("pre"),N=o(),D=t("h2"),F=e("4 - Send a event with a payload to the topic"),W=o(),_=t("pre"),q=o(),z=t("p"),G=e("Keep in mind that the phoenix uses the "),Q=t("code"),U=e("event"),V=e(" “heartbeat” to keep the conection alive, so if you dont want to lose the conection, send it each 30 seconds hehe"),this.h()},l(n){const t=p('[data-svelte="svelte-1dnnoj4"]',document.head);s=c(t,"META",{name:!0,content:!0}),a=c(t,"META",{name:!0,content:!0}),m=c(t,"META",{property:!0,content:!0}),f=c(t,"META",{property:!0,content:!0}),t.forEach(l),w=i(n),y=c(n,"H1",{itemprop:!0});var o=r(y);v=u(o,"Testing Phoenix Channels on Browser console"),o.forEach(l),E=i(n),b=c(n,"P",{});var e=r(b);x=u(e,"So… I was building a backend using only the channels, and I wanted to test it on the console… so after many search, here is how you can make it:"),e.forEach(l),j=i(n),T=c(n,"H2",{});var h=r(T);S=u(h,"1 - Connect to a socket"),h.forEach(l),P=i(n),H=c(n,"PRE",{class:!0}),r(H).forEach(l),I=i(n),M=c(n,"H2",{});var k=r(M);C=u(k,"2 - Show the messages that arrive from the server"),k.forEach(l),A=i(n),B=c(n,"PRE",{class:!0}),r(B).forEach(l),J=i(n),L=c(n,"H2",{});var d=r(L);R=u(d,"3 - Join to a topic"),d.forEach(l),O=i(n),K=c(n,"PRE",{class:!0}),r(K).forEach(l),N=i(n),D=c(n,"H2",{});var g=r(D);F=u(g,"4 - Send a event with a payload to the topic"),g.forEach(l),W=i(n),_=c(n,"PRE",{class:!0}),r(_).forEach(l),q=i(n),z=c(n,"P",{});var X=r(z);G=u(X,"Keep in mind that the phoenix uses the "),Q=c(X,"CODE",{});var Y=r(Q);U=u(Y,"event"),Y.forEach(l),V=u(X," “heartbeat” to keep the conection alive, so if you dont want to lose the conection, send it each 30 seconds hehe"),X.forEach(l),this.h()},h(){document.title="Testing Phoenix Channels on Browser console",h(s,"name","description"),h(s,"content","In this blog post I show how you can test your phoenix channels manually on the browser console"),h(a,"name","keywords"),h(a,"content","elixir, phoenix, phoenix channels, manual test"),h(m,"property","og:title"),h(m,"content","Testing Phoenix Channels on Browser console"),h(f,"property","og:description"),h(f,"content","In this blog post I show how you can test your phoenix channels manually on the browser console"),h(y,"itemprop","name"),h(H,"class","language-js"),h(B,"class","language-js"),h(K,"class","language-js"),h(_,"class","language-js")},m(n,t){k(document.head,s),k(document.head,a),k(document.head,m),k(document.head,f),d(n,w,t),d(n,y,t),k(y,v),d(n,E,t),d(n,b,t),k(b,x),d(n,j,t),d(n,T,t),k(T,S),d(n,P,t),d(n,H,t),H.innerHTML='<code class="language-js">  ws <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSocket</span><span class="token punctuation">(</span><span class="token string">"ws://localhost:4000/socket/websocket"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </code>',d(n,I,t),d(n,M,t),k(M,C),d(n,A,t),d(n,B,t),B.innerHTML='<code class="language-js">  ws<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"From Server:"</span><span class="token operator">+</span> e<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code>',d(n,J,t),d(n,L,t),k(L,R),d(n,O,t),d(n,K,t),K.innerHTML='<code class="language-js">ws<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>\n  <span class="token string">"topic"</span><span class="token operator">:</span> <span class="token string">"chat:lobby"</span><span class="token punctuation">,</span>\n  <span class="token string">"event"</span><span class="token operator">:</span> <span class="token string">"phx_join"</span><span class="token punctuation">,</span>\n  <span class="token string">"payload"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token string">"hello"</span><span class="token operator">:</span> <span class="token string">"world"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>\n  <span class="token string">"ref"</span><span class="token operator">:</span> <span class="token number">0</span>\n<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>',d(n,N,t),d(n,D,t),k(D,F),d(n,W,t),d(n,_,t),_.innerHTML='<code class="language-js">ws<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>\n  <span class="token string">"topic"</span><span class="token operator">:</span> <span class="token string">"chat:lobby"</span><span class="token punctuation">,</span>\n  <span class="token string">"event"</span><span class="token operator">:</span> <span class="token string">"echo"</span><span class="token punctuation">,</span>\n  <span class="token string">"payload"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token string">"hello"</span><span class="token operator">:</span> <span class="token string">"world"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>\n  <span class="token string">"ref"</span><span class="token operator">:</span> <span class="token number">0</span>\n<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>',d(n,q,t),d(n,z,t),k(z,G),k(z,Q),k(Q,U),k(z,V)},p:g,i:g,o:g,d(n){l(s),l(a),l(m),l(f),n&&l(w),n&&l(y),n&&l(E),n&&l(b),n&&l(j),n&&l(T),n&&l(P),n&&l(H),n&&l(I),n&&l(M),n&&l(A),n&&l(B),n&&l(J),n&&l(L),n&&l(O),n&&l(K),n&&l(N),n&&l(D),n&&l(W),n&&l(_),n&&l(q),n&&l(z)}}}export default class extends n{constructor(n){super(),s(this,n,null,m,a,{})}}
